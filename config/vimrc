" Vim File

" Author:   Alexandre Tea <alexandre.qtea@gmail.com>
" File:     /Users/alexandretea/Work/Personal/kickstarters/config/vimrc
" Purpose:  Vim general settings
" Created:  2016-08-07 00:02:27
" Modified: 2016-08-07 15:56:27


" Functions {

    " Create directory if it doesn't exist {
    function! CreateNotExistingDir(path)
        if !isdirectory(expand(a:path))
            call mkdir(expand(a:path), "p")
        endif
    endfunction
    " }

" }


" Formatting {
    set nowrap                      " Do not wrap long lines
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    "set matchpairs+=<:>             " Match, to be used with %
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    "set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
    "autocmd FileType go autocmd BufWritePre <buffer> Fmt
    autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
    autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
    " preceding line best in a plugin but here for now.

    autocmd BufNewFile,BufRead *.coffee set filetype=coffee

    " Workaround vim-commentary for Haskell
    autocmd FileType haskell setlocal commentstring=--\ %s
    " Workaround broken colour highlighting in Haskell
    autocmd FileType haskell,rust setlocal nospell
" }


" UI {
    " highlight search
    set hlsearch

    " highlight after 80 columns
    let &colorcolumn=join(range(81,82),",")
" }


" Keys behaviours {
    " can remove eol, etc ...
    set backspace=2
" }


" Pathogen loading {
    if filereadable(expand("~/.vim/autoload/pathogen.vim"))
        filetype off

        call pathogen#infect()
        call pathogen#helptags()

        filetype plugin indent on
        syntax on
    endif
" }


" Bundle settings {
    if filereadable(expand("~/.vimrc.bundles"))
        source ~/.vimrc.bundles
    endif
" }


" Directories {
    set backupdir=~/.vim.bkpdir
    set directory=~/.vim.swpdir
    set undodir=~/.vim.undodir

    " create directories if they don't exist yet
    call CreateNotExistingDir(&backupdir)
    call CreateNotExistingDir(&directory)
    call CreateNotExistingDir(&undodir)
" }


" JSON {
    nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    command FormatJson set filetype=json | %!python -m json.tool
    let g:vim_json_syntax_conceal = 0
" }
